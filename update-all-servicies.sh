#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö Docker-—Å–µ—Ä–≤–∏—Å–æ–≤ —Å –±—ç–∫–∞–ø–∞–º–∏
# –°–æ–∑–¥–∞–µ—Ç –±—ç–∫–∞–ø—ã volumes –∏ –ë–î –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞, –∑–∞—Ç–µ–º –æ–±–Ω–æ–≤–ª—è–µ—Ç –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã

set -euo pipefail

# === –ù–ê–°–¢–†–û–ô–ö–ê: –£–∫–∞–∂–∏—Ç–µ –∏–º—è –ø—Ä–æ–µ–∫—Ç–∞ Docker Compose ===
PROJECT_NAME="my-poject"
# ===================================================

usage() {
    cat <<EOF
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 --compose <–ø—É—Ç—å_–∫_docker-compose.yml> --env <–ø—É—Ç—å_–∫_.env>

–ü—Ä–∏–º–µ—Ä:
    $0 --compose ./docker-compose.yml --env ./.env

–û–ø—Ü–∏–∏:
    --compose   –ü—É—Ç—å –∫ docker-compose.yml
    --env       –ü—É—Ç—å –∫ .env —Ñ–∞–π–ª—É
    --help      –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
EOF
    exit 1
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
COMPOSE_FILE=""
ENV_FILE=""

# –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
TEMP=$(getopt -o '' --long compose:,env:,help -- "$@")
if [ $? -ne 0 ]; then
    echo "‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --help."
    exit 1
fi

eval set -- "$TEMP"

while true; do
    case "$1" in
        --compose)
            COMPOSE_FILE="$2"
            shift 2
            ;;
        --env)
            ENV_FILE="$2"
            shift 2
            ;;
        --help)
            usage
            ;;
        --)
            shift
            break
            ;;
        *)
            echo "‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞!"
            exit 1
            ;;
    esac
done

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
if [ -z "$COMPOSE_FILE" ] || [ -z "$ENV_FILE" ]; then
    echo "‚ùå –í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã."
    usage
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
for file in "$COMPOSE_FILE" "$ENV_FILE"; do
    if [ ! -f "$file" ]; then
        echo "‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: $file"
        exit 1
    fi
done

# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –±—ç–∫–∞–ø–æ–≤
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
BACKUP_BASE_DIR="$SCRIPT_DIR/backups"
TIMESTAMP=$(date +%Y%m%d_%H%M%S)
mkdir -p "$BACKUP_BASE_DIR"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ docker-compose —Å –æ–±—â–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
dc() {
    docker-compose -p "$PROJECT_NAME" -f "$COMPOSE_FILE" --env-file "$ENV_FILE" "$@"
}

# === –ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ===
echo "=== üöÄ –ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ ==="
echo "üì¶ –ü—Ä–æ–µ–∫—Ç: $PROJECT_NAME"
echo "üìÑ Docker-compose: $COMPOSE_FILE"
echo "üîê Env —Ñ–∞–π–ª: $ENV_FILE"
echo "üíæ –ë—ç–∫–∞–ø—ã: $BACKUP_BASE_DIR"
echo

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
echo "üîç –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
SERVICES=$(dc config --services 2>/dev/null)

if [ -z "$SERVICES" ]; then
    echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–∏—Å–æ–≤ –∏–∑ docker-compose.yml"
    exit 1
fi

SERVICE_ARRAY=($SERVICES)
SERVICE_COUNT=${#SERVICE_ARRAY[@]}

echo "üìã –ù–∞–π–¥–µ–Ω–æ —Å–µ—Ä–≤–∏—Å–æ–≤: $SERVICE_COUNT"
echo "--------------------"
for service in "${SERVICE_ARRAY[@]}"; do
    echo "  ‚Ä¢ $service"
done
echo "--------------------"
echo

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
read -p "üîÑ –ù–∞—á–∞—Ç—å –º–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤? (y/N): " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo "‚ùå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"
    exit 0
fi

echo
echo "=== üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–æ–≤ –¥–ª—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ ==="
echo

# === –°–û–ó–î–ê–ù–ò–ï –ë–≠–ö–ê–ü–û–í –î–õ–Ø –í–°–ï–• –°–ï–†–í–ò–°–û–í ===
SUCCESS_COUNT=0
FAILED_SERVICES=()
TOTAL_SERVICES=${#SERVICE_ARRAY[@]}

for i in "${!SERVICE_ARRAY[@]}"; do
    SERVICE_NAME="${SERVICE_ARRAY[$i]}"
    current=$((i+1))
    
    echo "================================================================"
    echo "üì¶ –ë—ç–∫–∞–ø —Å–µ—Ä–≤–∏—Å–∞ $current –∏–∑ $TOTAL_SERVICES: $SERVICE_NAME"
    echo "================================================================"
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –±—ç–∫–∞–ø–∞ –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞
    BACKUP_SERVICE_DIR="$BACKUP_BASE_DIR/$SERVICE_NAME"
    mkdir -p "$BACKUP_SERVICE_DIR"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–µ—Ä–≤–∏—Å
    echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å–µ—Ä–≤–∏—Å–∞ '$SERVICE_NAME'..."
    if ! dc config --services | grep -q "^$SERVICE_NAME$"; then
        echo "‚ùå –°–µ—Ä–≤–∏—Å '$SERVICE_NAME' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ docker-compose.yml"
        FAILED_SERVICES+=("$SERVICE_NAME (—Å–µ—Ä–≤–∏—Å –Ω–µ –Ω–∞–π–¥–µ–Ω)")
        continue
    fi

    # –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —á–µ—Ä–µ–∑ docker-compose
    echo "üîç –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ '$SERVICE_NAME'..."
    CONTAINER_ID=$(dc ps -q "$SERVICE_NAME" 2>/dev/null || true)

    if [ -z "$CONTAINER_ID" ]; then
        echo "‚ö†Ô∏è  –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ '$SERVICE_NAME' –Ω–µ –Ω–∞–π–¥–µ–Ω"
        echo "üí° –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –±—ç–∫–∞–ø–∞..."
        if dc up -d "$SERVICE_NAME"; then
            echo "‚úÖ –°–µ—Ä–≤–∏—Å '$SERVICE_NAME' —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω"
            sleep 3
            CONTAINER_ID=$(dc ps -q "$SERVICE_NAME" 2>/dev/null || true)
            if [ -z "$CONTAINER_ID" ]; then
                echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞"
                FAILED_SERVICES+=("$SERVICE_NAME (–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω)")
                continue
            fi
        else
            echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å '$SERVICE_NAME'"
            FAILED_SERVICES+=("$SERVICE_NAME (–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å)")
            continue
        fi
    fi

    echo "‚úÖ –ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä: $CONTAINER_ID"

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ volume —á–µ—Ä–µ–∑ docker inspect
    echo "üîç –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ volume —á–µ—Ä–µ–∑ docker inspect..."
    VOLUME_NAME=$(docker inspect "$CONTAINER_ID" --format '
{{- range .Mounts }}
  {{- if eq .Type "volume" }}
    {{- .Name }}
  {{- end }}
{{- end }}
' | tr -d '[:space:]' | head -n1)

    if [ -n "$VOLUME_NAME" ]; then
        echo "‚úÖ –ù–∞–π–¥–µ–Ω volume: $VOLUME_NAME"
    else
        echo "‚ö†Ô∏è  –£ —Å–µ—Ä–≤–∏—Å–∞ –Ω–µ—Ç volume-–º–∞—É–Ω—Ç–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è —Å–µ—Ä–≤–∏—Å–∞."
        VOLUME_NAME="$SERVICE_NAME"
    fi

    # –ë—ç–∫–∞–ø –ë–î (–µ—Å–ª–∏ —ç—Ç–æ —Å–µ—Ä–≤–∏—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö)
    if [[ "$SERVICE_NAME" =~ (db|postgres|database|mysql|mongo) ]]; then
        echo "üíæ –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
        
        # –î–ª—è PostgreSQL
        if [[ "$SERVICE_NAME" =~ (postgres|db_postgres) ]]; then
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ .env
            DB_NAME=$(grep "^POSTGRES_DB=" "$ENV_FILE" | cut -d'=' -f2)
            DB_USER=$(grep "^POSTGRES_USER=" "$ENV_FILE" | cut -d'=' -f2)
            
            if [ -n "$DB_NAME" ] && [ -n "$DB_USER" ]; then
                DB_BACKUP_NAME="${DB_NAME}_${TIMESTAMP}.sql"
                DB_BACKUP_PATH="$BACKUP_SERVICE_DIR/$DB_BACKUP_NAME"
                
                echo "üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –ë–î: $DB_BACKUP_NAME"
                if docker exec "$CONTAINER_ID" pg_dump -U "$DB_USER" -d "$DB_NAME" --clean --if-exists > "$DB_BACKUP_PATH"; then
                    echo "‚úÖ –ë—ç–∫–∞–ø –ë–î —Å–æ–∑–¥–∞–Ω: $DB_BACKUP_PATH"
                    SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
                else
                    echo "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—ç–∫–∞–ø–∞ –ë–î!"
                    FAILED_SERVICES+=("$SERVICE_NAME (–±—ç–∫–∞–ø –ë–î)")
                fi
            else
                echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ë–î –∏–∑ .env"
                FAILED_SERVICES+=("$SERVICE_NAME (–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ë–î)")
            fi
        else
            echo "‚ö†Ô∏è  –¢–∏–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –±—ç–∫–∞–ø–∞"
            SUCCESS_COUNT=$((SUCCESS_COUNT + 1))  # –°—á–∏—Ç–∞–µ–º –∫–∞–∫ —É—Å–ø–µ—à–Ω—ã–π
        fi
    fi

    # –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    echo "üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞..."
    CONTAINER_BACKUP_NAME="${VOLUME_NAME}_${TIMESTAMP}.tar.gz"
    CONTAINER_BACKUP_PATH="$BACKUP_SERVICE_DIR/$CONTAINER_BACKUP_NAME"
    
    if docker export "$CONTAINER_ID" | gzip -c > "$CONTAINER_BACKUP_PATH" 2>/dev/null; then
        echo "‚úÖ –ë—ç–∫–∞–ø –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —Å–æ–∑–¥–∞–Ω: $CONTAINER_BACKUP_PATH"
        SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
    else
        echo "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—ç–∫–∞–ø–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞!"
        FAILED_SERVICES+=("$SERVICE_NAME (–±—ç–∫–∞–ø –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞)")
    fi
    
    echo
done

# === –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ü–û –ë–≠–ö–ê–ü–ê–ú ===
echo "================================================================"
echo "üìä === –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ü–û –ë–≠–ö–ê–ü–ê–ú ==="
echo "================================================================"
echo "‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ –±—ç–∫–∞–ø–æ–≤: $SUCCESS_COUNT"

if [ ${#FAILED_SERVICES[@]} -gt 0 ]; then
    echo "‚ùå –û—à–∏–±–æ–∫: ${#FAILED_SERVICES[@]}"
    echo "   –°–µ—Ä–≤–∏—Å—ã —Å –æ—à–∏–±–∫–∞–º–∏:"
    for failed in "${FAILED_SERVICES[@]}"; do
        echo "   ‚Ä¢ $failed"
    done
    echo
    read -p "‚ùì –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –æ—à–∏–±–∫–∏ –±—ç–∫–∞–ø–æ–≤? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo "‚ùå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫ –±—ç–∫–∞–ø–æ–≤"
        exit 1
    fi
else
    echo "üéâ –í—Å–µ –±—ç–∫–∞–ø—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!"
fi

echo
echo "=== üöÄ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ ==="
echo

# === –û–ë–ù–û–í–õ–ï–ù–ò–ï –í–°–ï–• –°–ï–†–í–ò–°–û–í ===
echo "üîÑ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
dc down 2>/dev/null || true

echo "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –æ–±—Ä–∞–∑–æ–≤..."
dc pull

echo "üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
dc up -d

echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤..."
sleep 5

echo
echo "üìä === –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤ ==="
dc ps

# === –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ ===
echo
echo "üéâ === –ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ ==="
echo "üíæ –ë—ç–∫–∞–ø—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: $BACKUP_BASE_DIR"
echo "üí° –î–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: restore-service.sh"